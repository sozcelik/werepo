<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

 <!-- SHIRO : how it works
 1- in web.xml, there are two filters defined and order matters.
 2- Since mapping is set as  /*, all requests go through these shiro filters in the order they appear in web.xml
 3- shiroFilter index.jsp -> /backend ->wicketFilter initializes admin tool and 
  -->
	<!-- Apache Shiro Components -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: -->
		<property name="loginUrl" value="/account/login" />
		<!-- <property name="successUrl" value="/home.jsp"/> <property name="unauthorizedUrl" 
			value="/unauthorized.jsp"/> -->
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean -->
		<!-- defined will be automatically acquired and available via its beanName 
			in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/> 
			</util:map> </property> -->

<!-- this can be safely removed I think -->
		<property name="filterChainDefinitions">
			<value>
				/admin/** = authc
			</value>
		</property>
	</bean>

	<bean id="shiroRestFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/rest/json/authentication/timeout" />
		<property name="filterChainDefinitions">
			<value>
				/rest/resources/** = anon
				/rest/container/** = anon
				/rest/json/authentication/login/** = anon, threadContextFilter, jsonpCallbackFilter
				/rest/json/authentication/timeout = anon, threadContextFilter,jsonpCallbackFilter
				/rest/json/** = authsc, threadContextFilter, jsonpCallbackFilter
				/rest/** = authSecHash, noSessionCreation, threadContextFilter
			</value>
		</property>
	</bean>

	<bean id="authsc"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="loginUrl" value="/rest/json/authentication/timeout" />
	</bean>

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application 
		context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above 
		and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly 
		add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
		more details. -->
	<!-- <bean id="someFilter" class="..."/> <bean id="anotherFilter" class="..."> 
		... </bean> -->
	<bean id="threadContextFilter"
		class="com.brightpoint.directconnect.core.util.ThreadContextFilter" />
	<bean id="jsonpCallbackFilter"
		class="com.brightpoint.directconnect.core.util.JsonpCallbackFilter" />
	<bean id="cryptoService"
		class="com.brightpoint.directconnect.core.security.CryptoServiceImpl" />
	<bean id="authSecHash"
		class="com.brightpoint.directconnect.core.security.SecurityHashAuthenticatingFilter">
		<property name="applicationName" value="Subscription Configurator REST API" />
	</bean>
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="${ehcache.core.configuration.file.path}" />
	</bean>
	
	<bean id="uniqueIdSessionListener" class="com.brightpoint.directconnect.core.security.UniqueIdSessionListener"/>

	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionIdCookie.name" value="SCSESSIONID" />
		<property name="globalSessionTimeout" value="${shiro.session.timeout}" />
		<property name="sessionListeners"> 
			<list>
				<ref bean="uniqueIdSessionListener"/> 
			</list> 
		</property> 
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app (realm configured next, below). If you have multiple 
			realms, use the 'realms' property instead. -->
		<property name="realms">
			<list>
				<ref bean="adminToolSecurityRealm" />
				<ref bean="clientSecurityRealm" />
			</list>
		</property>
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- Post processor that automatically invokes init() and destroy() methods -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<!-- <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> -->
	<!-- <property name="securityManager" ref="securityManager"/> -->
	<!-- </bean> -->
	<bean
		class="com.brightpoint.directconnect.core.security.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>